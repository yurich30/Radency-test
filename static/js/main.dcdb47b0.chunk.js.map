{"version":3,"sources":["components/Table.js","App.js","reportWebVitals.js","index.js"],"names":["Table","props","workers","getDuplicatedEmails","duplicatedEmailsById","forEach","worker","index","compareWorker","compareWorkerIndex","id","email","toLowerCase","isEmailDuplicated","compareIndex","isIndexDuplicated","regExpDate","currentDate","parseFloat","moment","add","calendar","date","Date","dateTime","format","className","map","fullname","phone","age","experience","yearlyincome","str","toFixed","haschildren","licensestates","test","expirationdate","licensenumber","length","Object","keys","App","React","useState","setWorkers","highlited","setHighlited","console","log","parserOptions","header","dynamicTyping","skipEmptyLines","transformHeader","replace","slice","onFileLoaded","data","prev","onDragEnter","onDragLeave","onDragOver","e","preventDefault","onDrop","Array","from","dataTransfer","files","filter","file","type","a","text","result","parse","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dcdb47b0.chunk.js","sourcesContent":["import moment from 'moment';\nimport './Table.css'\n\nconst Table = (props) => {\n\n    const workers = props.workers;\n\n    function getDuplicatedEmails () {\n\t\tconst duplicatedEmailsById = {};\n\t\tconst isEmailDuplicated = (worker, compareWorker) => worker.email.toLowerCase() === compareWorker.email.toLowerCase()\n\t\tconst isIndexDuplicated = (index, compareIndex) =>  index < compareIndex\n\t\tworkers.forEach( (worker, index) => workers.forEach((compareWorker, compareWorkerIndex) => {\n\t\t\tif (worker.id !== compareWorker.id && isEmailDuplicated(worker, compareWorker) && !duplicatedEmailsById[worker.id] && isIndexDuplicated(index, compareWorkerIndex)){\n\t\t\t\tduplicatedEmailsById[worker.id] = compareWorker.id;\n\t\t\t}\n\t\t}) )\n\t\treturn duplicatedEmailsById\n\t}\n\n    function getValidNumberFromString (str) {\n\t\tlet number = parseFloat(str);\n\t\tlet validNumber = number.toFixed(2)\n\t\treturn validNumber\n\t}\n\n    const regExpDate = /[0-9]{1,4}[-/]{1}[0-9]{1,2}[-/]{1}[0-9]{2,4}/gi\n\tlet currentDate = parseFloat(moment().add(10, 'days').calendar());\n\tconst format = \"YYYY-MM-DD\"\n\tlet date = new Date();\n\tlet dateTime = parseFloat(moment(date).format(format));\n\n    return (\n        <div>\n            <table className=\"table\">\n                <tr>\n                    <th>ID</th>\n                    <th>Full Name</th>\n                    <th>Phone</th>\n                    <th>E-Mail</th>\n                    <th>Age</th>\n                    <th>Experience</th>\n                    <th>Yearly Income</th>\n                    <th>Has children</th>\n                    <th>License states</th>\n                    <th>Expiration Date</th>\n                    <th>License number</th>\n                    <th>Duplicate with</th>\n                </tr>\n                {workers.map( (worker) => \n                    <tr key={Object.keys(workers)}>\n                        <td>{worker.id}</td>\n                        <td>{worker.fullname}</td>\n                        <td>{worker.phone}</td>\n                        <td>{worker.email}</td>\n                        <td className={worker.age < 21 || 0 ? \"invalid\" : \"\"}>{worker.age}</td>\n                        <td className={worker.experience > worker.age || worker.experience <= 0 ? \"invalid\" : \"\"}>{worker.experience}</td>\n                        <td className={worker.yearlyincome > 1000000 ? \"invalid\" : \"\"}>{getValidNumberFromString(worker.yearlyincome)}</td>\n                        <td>{worker.haschildren ? \"true\" : \"false\"}</td>\n                        <td>{worker.licensestates}</td>\n                        <td className={regExpDate.test(worker.expirationdate) && parseFloat(worker.expirationdate) <= currentDate || parseFloat(worker.expirationdate) <= dateTime ? \"\" : \"invalid\"}>{worker.expirationdate}</td>\n                        <td className={worker.licensenumber.length === 6 ? \"\" : \"invalid\"}>{worker.licensenumber}</td>\n                        <td>{getDuplicatedEmails()[worker.id]}</td>\n                    </tr>)}\n            </table>\n        </div>\n    )\n}\n\nexport default Table","import React from 'react'\nimport CSVReader from 'react-csv-reader';\nimport {parse} from 'papaparse'\nimport './App.css';\nimport Table from './components/Table';\n\nfunction App() {\n\n\tconst [workers, setWorkers] = React.useState([])\n\tconst [highlited, setHighlited] = React.useState(false);\n\tconsole.log(workers);\n\t\n\tconst parseOptions = {\n\t\theader: true,\n\t\tdynamicTyping: true,\n\t\tskipEmptyLines: true,\n\t\ttransformHeader: header =>\n\t\t  header\n\t\t\t.toLowerCase()\n\t\t\t.replace(/\\W/g, '')\n\t\t\t.slice()\n\t}\n\t\n  return (\n    <div className=\"App\">\n\t\t<div>\n\t\t\t<h1 className=\"App\">Import Workers</h1>\n\t\t\t<div className=\"imp\">\n\t\t\t\t<CSVReader  parserOptions={parseOptions} onFileLoaded={(data) => setWorkers(prev => [...prev, ...data] )} />\n\t\t\t</div>\n\t\t</div>\n\t\t<div\n\t\t\tclassName={highlited ? \"active\" : \"unactive\"}\n\t\t\tonDragEnter={\n\t\t\t\t() => {setHighlited(true)}\n\t\t\t}\n\t\t\tonDragLeave={() => {setHighlited(false)}}\n\t\t\tonDragOver={(e) => {\n\t\t\t\te.preventDefault()\n\t\t\t}}\n\t\t\tonDrop={(e) => {\n\t\t\t\tsetHighlited(false)\n\t\t\t\te.preventDefault();\n\t\t\t\tArray.from(e.dataTransfer.files)\n\t\t\t\t\t.filter(file => file.type === 'text/csv')\n\t\t\t\t\t.forEach( async (file) => {\n\t\t\t\t\t\tconst text = await file.text();\n\t\t\t\t\t\tlet result = parse(text, \n\t\t\t\t\t\t\t{header: true, transformHeader: header =>\n\t\t\t\t\t\t\t\theader\n\t\t\t\t\t\t\t\t.toLowerCase()\n\t\t\t\t\t\t\t\t.replace(/\\W/g, '')\n\t\t\t\t\t\t\t\t.slice()\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\tconsole.log((result));\n\t\t\t\t\t\tsetWorkers( prev => [...prev, ...result.data] )\n\t\t\t\t\t})\n\t\t\t\t}}>\n\t\t\tDROP .CSV FILE HERE</div>\n\t\t\t<Table workers={workers}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}